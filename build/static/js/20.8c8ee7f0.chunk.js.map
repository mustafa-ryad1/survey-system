{"version":3,"sources":["views/submissions/userData.js"],"names":["ref","React","createRef","CreateForm","props","submission_id","match","params","id","useState","form_fields","submission","setSubmission","collapsed","setCollapsed","value","description","setDescription","title","setTitle","dispatch","useDispatch","useEffect","type","val","axios","get","then","res","data","report_title","form_id","catch","err","console","log","targetRef","filename","toPdf","className","onClick","xl","map","field","label","name","show","input_type","image_src","includes","width","height","controls","src","alt"],"mappings":"8UAQMA,EAAMC,IAAMC,YAEH,SAASC,EAAWC,GAC/B,IACMC,EADwBD,EAAtBE,MAASC,OACaC,GAC9B,EAAoCC,mBAAS,CAACC,YAAY,KAA1D,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAsCL,mBAAS,CAACM,MAAM,KAAtD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0BR,mBAAS,IAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACMC,EAAWC,cAmBjB,OAjBAC,qBAAU,WACRF,EAAS,CAACG,KAAM,MAAOC,KAAI,IACzBC,IAAMC,IAAN,2BAA8BrB,IAAiBsB,MAAK,SAAAC,GAChDhB,EAAcgB,EAAIC,KAAKlB,YAEvBQ,EAASS,EAAIC,KAAKlB,WAAWmB,cAC7BL,IAAMC,IAAN,4BAA+BE,EAAIC,KAAKlB,WAAWoB,UAAWJ,MAAK,SAAAC,GACjEX,EAAeW,EAAIC,KAAKb,gBACvBgB,OAAM,SAAAC,GACPhB,EAAe,CAACF,MAAM,WAEzBiB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAGlB,IAGE,gCACI,6BAAKf,IAEL,cAAC,IAAD,CAAKkB,UAAWpC,EAAKqC,SAAUnB,EAA/B,SACG,gBAAGoB,EAAH,EAAGA,MAAH,OAAe,wBAAQC,UAAW,kBAAmBC,QAASF,EAA/C,6BAElB,uBACA,sBAAKtC,IAAKA,EAAV,WACY,OAAXgB,QAAW,IAAXA,OAAA,EAAAA,EAAaD,QAAS,cAAC,IAAD,UACnB,cAAC,IAAD,CAAM0B,GAAG,KAAT,SACA,eAAC,IAAD,WACA,cAAC,IAAD,iCAII,cAAC,IAAD,UAEA,4BACKzB,EAAYD,iBAOtBJ,EAAWD,YAAYgC,KAAI,SAAAC,GAAK,OAC7B,8BACI,eAAC,IAAD,WACE,eAAC,IAAD,WACGA,EAAMC,MACL,qBAAKL,UAAU,sBAAf,SAEE,cAAC,IAAD,CAAOA,UAAU,qBAAqBC,QAAS,kBAAM1B,GAAcD,IAAnE,SACE,cAAC,IAAD,CAAOgC,KAAMhC,EAAY,qBAAqB,2BAKtD,cAAC,IAAD,CAAWiC,KAAMjC,EAAjB,SACE,cAAC,IAAD,UACsB,SAAnB8B,EAAMI,WAAoBJ,EAAM5B,MAC/B,8BAAM,YAAI4B,EAAM5B,OAAO2B,KAAI,SAAAM,GAEvB,OAAOA,EAAUC,SAAS,OAC1B,uBAAOC,MAAM,QAAQC,OAAO,QAAQC,UAAQ,EAA5C,SACI,wBAAQC,IAAKL,EAAWzB,KAAK,gBAGjC,qBAAK8B,IAAKL,EACJM,IAAI,GACJJ,MAAM,QACNC,OAAO,QACPZ,UAAU,qBA1BtBI,EAAMnC","file":"static/js/20.8c8ee7f0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { CCard, CCardBody, CCardFooter, CCardHeader, CCol, CCollapse, CLink, CRow } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport Pdf from \"react-to-pdf\";\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nconst ref = React.createRef();\n\nexport default function CreateForm(props) {\n    const { match: { params } } = props;\n    const submission_id =  params.id;\n    const [submission, setSubmission] = useState({form_fields:[]});\n    const [collapsed, setCollapsed] = useState(true)\n    const [description, setDescription] = useState({value:\"\"})\n    const [title, setTitle] = useState(\"\")\n    const dispatch = useDispatch()\n\n    useEffect(()=>{\n      dispatch({type: 'set', val:false})\n        axios.get(`/form/submission/${submission_id}`).then(res=>{\n            setSubmission(res.data.submission)\n            // console.log(res.data.submission)\n            setTitle(res.data.submission.report_title)\n            axios.get(`/form/description/${res.data.submission.form_id}`).then(res=>{\n              setDescription(res.data.description)\n            }).catch(err=>{\n              setDescription({value:\"\"})\n            })\n        }).catch(err=>{\n            console.log(err)\n        })\n\n    },[])\n\n    return (\n        <div>\n            <h1>{title}</h1>\n\n            <Pdf targetRef={ref} filename={title}>\n              {({ toPdf }) => <button className={\"btn btn-primary\"} onClick={toPdf}>Generate Pdf</button>}\n            </Pdf>\n            <hr/>\n            <div ref={ref}>\n            {description?.value && <CRow  >\n                <CCol xl=\"12\">\n                <CCard>\n                <CCardHeader>\n                    Report Description\n                </CCardHeader>\n\n                    <CCardBody>\n\n                    <p>\n                        {description.value}\n                    </p>\n\n                    </CCardBody>\n                </CCard>\n                </CCol>\n            </CRow>}\n              {submission.form_fields.map(field=>\n                  <div key={field.id} >\n                      <CCard>\n                        <CCardHeader>\n                          {field.label}\n                            <div className=\"card-header-actions\">\n\n                              <CLink className=\"card-header-action\" onClick={() => setCollapsed(!collapsed)}>\n                                <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\n                              </CLink>\n\n                            </div>\n                        </CCardHeader>\n                        <CCollapse show={collapsed}>\n                          <CCardBody>\n                            {field.input_type!==\"file\"?field.value:\n                              <div>{[...field.value].map(image_src=>{\n\n                                  return image_src.includes(\"mp4\")?\n                                  <video width=\"400px\" height=\"300px\" controls >\n                                      <source src={image_src} type=\"video/mp4\"/>\n                                  </video>:\n\n                                  <img src={image_src}\n                                        alt=\"\"\n                                        width=\"400px\"\n                                        height=\"300px\"\n                                        className=\"m-1\"/>\n\n                              })}</div>}\n                          </CCardBody>\n                        </CCollapse>\n                      </CCard>\n                  </div>)}\n                </div>\n        </div>\n    );\n\n}\n"],"sourceRoot":""}